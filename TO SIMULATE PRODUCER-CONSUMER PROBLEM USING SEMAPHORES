#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
sem_t full,empty;
int in=0,out=0,buffer[5];
pthread_mutex_t mutex;

void* producer(void *arg)
{
	int item=0;
	while(1)
	{
		sem_wait(&empty);
		pthread_mutex_lock(&mutex);
		buffer[in]=item;
		printf("Producer Produced %d\n",item);
		item++;
		in=(in+1)%5;
		pthread_mutex_unlock(&mutex);
		sem_post(&full);
		usleep(500000);
	}
	pthread_exit(NULL);
}
void *consumer(void *arg)
{
	while(1)
	{
		sem_wait(&full);
		pthread_mutex_lock(&mutex);
		int item=buffer[out];
		printf("Consumer Consumed %d\n",item);
		out=(out+1)%5;
		pthread_mutex_unlock(&mutex);
		sem_post(&empty);
		usleep(500000);
	}
	pthread_exit(NULL);
}
int main()
{
	pthread_t  p,c;
	sem_init(&full,0,0);
	sem_init(&empty,0,4);
	pthread_mutex_init(&mutex,NULL);
	pthread_create(&p,NULL,producer,NULL);
	pthread_create(&c,NULL,consumer,NULL);
	pthread_join(p,NULL);
	pthread_join(c,NULL);
}
